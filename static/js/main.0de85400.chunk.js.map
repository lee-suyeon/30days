{"version":3,"sources":["Style/globalStyles.jsx","Style/Theme.jsx","Components/Template.jsx","Components/AddMessage.jsx","Components/Button.jsx","Components/Reset.jsx","Components/Modal.jsx","Components/ResetMessage.jsx","Components/CheckMessage.jsx","Components/Report.jsx","Components/Note.jsx","Components/CounterBox.jsx","Components/Cell.jsx","Components/CellTable.jsx","Components/ChallengeBoard.jsx","Components/Form.jsx","Components/StartChallenge.jsx","App.jsx","index.js"],"names":["GlobalStyle","createGlobalStyle","reset","theme","colors","mainColor","subColor","darkGrayColor","grayColor","fontSize","large","medium","small","Header","styled","header","Container","div","Title","h1","Board","Template","children","AddGroup","AddButton","AddCircleOutline","AddMessage","useContext","ChallengeContext","dispatch","initial","onClick","type","TOGGLE_MODAL","form","sizeStyles","css","props","size","SubmitButton","button","width","Button","title","rest","ResetButton","ReplayIcon","Replay","Reset","onClickReset","DarkBackground","background","ModalBlock","CloseButton","Close","Modal","onClickClose","useCallback","ButtonGroup","Info","p","ResetMessage","visible","onClickConfirm","RESET_CHALLENGE","onClickCancel","console","log","hide","showUp","keyframes","hideDown","MessageBox","disappear","IndexColor","cellState","MessageCont","CheckIcon","CheckCircle","CheckMessage","check","useState","animate","setAnimate","localVisible","setLocalVisible","useEffect","setTimeout","ResultCircle","ResultCont","Bar","Report","count","resultMessage","setResultMessage","report","className","Math","round","Content","EditButton","Edit","Note","memo","challenge","goal","startDate","endDate","dday","motivate","onEditForm","CurrentWrap","CurrentBox","DayCounter","InsertChartOutlined","CounterBox","colorStyles","done","Circle","Days","Cell","days","setDone","onClickCell","CANCELED_CELL","CHECKED_CELL","dayNumbers","Array","fill","map","v","i","CellTable","key","LeftBox","RightBox","ChallengeBoard","FormGroup","FormBlock","getToday","today","Date","convertDateString","date","year","getFullYear","month","getMonth","day","getDate","getAfter30days","inputDate","setDate","Form","setGoal","message","setMessage","setStartDate","setEndDate","setMotivate","inputRef","useRef","startDay","after30Days","endDay","gap","getTime","floor","getDday","onChangeGoal","e","target","value","onChangeDate","onChangeMotivate","onSubmit","preventDefault","START_CHALLENGE","current","focus","onChange","name","placeholder","autoComplete","ref","min","disabled","maxLength","StartChallenge","createContext","modal","initialState","reducer","state","action","App","useReducer","useMemo","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0de85400.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    ${reset}\r\n    * {\r\n        box-sizing: border-box;\r\n\r\n      }\r\n      body{\r\n        background-color: #e8f1e9;\r\n        font-family: 'Montserrat', sans-serif;\r\n        font-size: 1.2rem;\r\n        font-weight: 400;\r\n        color: #333;\r\n      }\r\n      ol, ul, li {\r\n        list-style: none;\r\n      }\r\n      img {\r\n        display: block;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n      input, label {\r\n        display: block;\r\n      }\r\n      textarea, button,input[type=\"date\"] {\r\n        font-family: 'Montserrat', 'Noto Sans KR', sans-serif;\r\n      }\r\n      button {\r\n        border: none;\r\n      }\r\n\r\n`\r\nexport default GlobalStyle;","const theme = {\r\n  colors : {\r\n    mainColor: '#447d53',\r\n    subColor: '#d4e2d4',\r\n    darkGrayColor: '#333',\r\n    grayColor: '#999',\r\n  },\r\n\r\n  fontSize : {\r\n    large : '5.5rem',\r\n    medium : '3.75rem',\r\n    small: '1.1rem'\r\n  }\r\n}\r\nexport default theme;","import React from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport theme from '../Style/Theme';\r\n\r\nconst Header = styled.header`\r\n  width: 100%;\r\n  height: 4.2rem;\r\n  color: #ffffff;\r\n  font-style: italic;\r\n  text-align: right;\r\n  padding: 2.4rem 0.9rem 0 0;\r\n  background-color: ${({ theme }) => theme.colors.mainColor}\r\n`\r\nconst Container = styled.div`\r\n  width: 1200px;\r\n  margin: 0 auto;\r\n`\r\nconst Title = styled.h1`\r\n  font-size: ${({ theme }) => theme.fontSize.large};\r\n  color: ${({ theme }) => theme.colors.mainColor};\r\n  font-weight: 600;\r\n  margin: 3rem 0 2.2rem;\r\n`\r\nconst Board = styled.div`\r\n   position: relative;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: 650px;\r\n  position: relative;\r\n  background-color: #ffffff;\r\n  border-radius: 10px;\r\n  box-shadow: 2px 2px 5px 5px rgba(0, 0, 0, 0.02);\r\n  padding: 2.5rem;\r\n  margin-bottom: 50px;\r\n`\r\n\r\n\r\n\r\nconst Template = ({ children }) => {\r\n   return (\r\n      <>\r\n         <ThemeProvider theme={theme}>\r\n            <Header>You will never change your life until you change something you do daily.</Header>\r\n            <Container>\r\n               <Title>30days</Title>\r\n               <Board>\r\n                  {children}\r\n               </Board>\r\n            </Container>\r\n         </ThemeProvider>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Template;\r\n","import React, { useContext } from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport theme from '../Style/Theme';\r\nimport { AddCircleOutline } from '@styled-icons/material';\r\nimport { ChallengeContext, TOGGLE_MODAL } from '../App';\r\n\r\n\r\nconst AddGroup = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 60%;\r\n  line-height: 1.4;\r\n  font-weight: 500;\r\n  text-align: center;\r\n`\r\nconst AddButton = styled(AddCircleOutline)`\r\n  display: block;\r\n  fill: ${({ theme }) => theme.colors.subColor};\r\n  width: 70px;\r\n  margin: 0 auto 0.5rem;\r\n  cursor: pointer;\r\n  transition: 0.2s;\r\n  &:hover {\r\n    fill:  ${({ theme }) => theme.colors.mainColor};\r\n  }\r\n`\r\n\r\nconst AddMessage = () => {\r\n   const { dispatch, initial } = useContext(ChallengeContext);\r\n\r\n   const onClickAddButton = () => {\r\n      dispatch({ type: TOGGLE_MODAL, form: true });\r\n    }\r\n\r\n   if(initial) return null;\r\n   return (\r\n      <>\r\n         <AddGroup>                  \r\n            <AddButton onClick={onClickAddButton}/>\r\n            There are no challenge yet.<br /> Click + button to add your first challenge.\r\n         </AddGroup>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default AddMessage;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst sizeStyles = css`\r\n    ${props =>\r\n      props.size === 'small' &&\r\n      css`\r\n        width: 49%;\r\n        height: 55px;\r\n        font-size: 1.5rem;\r\n      `}\r\n    ${props =>\r\n      props.size === 'medium' &&\r\n      css`\r\n        width: 49%;\r\n        height: 55px;\r\n        font-size: 1.4rem;\r\n      `}\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n   width: ${props => props.width || '100%'};\r\n   height: 60px;\r\n   background-color: #447d53;\r\n   border-radius: 5px;\r\n   cursor: pointer;\r\n   margin-top: 1.5rem;\r\n   color: #fff;\r\n   font-size: 1.8rem;\r\n   font-weight: 500;\r\n   letter-spacing: 2px;\r\n\r\n   & + & {\r\n      margin-left: 2%;\r\n    }\r\n\r\n    ${sizeStyles}\r\n`;\r\n\r\n\r\n\r\nconst Button = ({ title, width, size, ...rest }) => {\r\n   return (\r\n      <>\r\n         <SubmitButton {...rest} width={width} size={size}>{title}</SubmitButton>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Replay } from '@styled-icons/material/Replay';\r\nimport Button from './Button';\r\n\r\nconst ResetButton = styled.button`\r\n    position: fixed;\r\n    bottom: 3rem;\r\n    right: 3rem;\r\n   width: 70px;\r\n   height: 70px;\r\n   background-color: #447d53;\r\n   border-radius: 50%;\r\n   color: #fff;\r\n   font-size: 0.9rem;\r\n   cursor: pointer;\r\n   z-index: 5;\r\n\r\n`;\r\n\r\nconst ReplayIcon = styled(Replay)`\r\n    width: 30px;\r\n    fill: #fff;\r\n    transition: 0.3s;\r\n    cursor: pointer;\r\n    &:hover {\r\n      transform: rotate(-90deg);\r\n    }\r\n`\r\n\r\nconst Reset = ({ onClickReset }) => {\r\n   return (\r\n      <>\r\n         <ResetButton onClick={onClickReset}>\r\n             <ReplayIcon />\r\n             reset\r\n         </ResetButton>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Reset;","import React, { useContext, useCallback } from 'react';\r\nimport styled, { ThemeProvider, css } from 'styled-components';\r\nimport { Close } from '@styled-icons/material/Close';\r\nimport { ChallengeContext, TOGGLE_MODAL } from '../App';\r\n\r\nconst sizeStyles = css`\r\n  ${props =>\r\n    props.size === 'small' &&\r\n    css`\r\n      width: 450px;\r\n      padding: 2rem;\r\n    `}\r\n`;\r\n\r\nconst DarkBackground = styled.div`\r\n   position: fixed;\r\n   left: 0; top: 0;\r\n   width: 100%; \r\n   height: 100%; \r\n   background: ${props => props.background || 'rgba(22, 50, 25, 0.8);'}\r\n   z-index: 10;\r\n`\r\n\r\nconst ModalBlock = styled.div`\r\n   width: 470px;\r\n   position: absolute;\r\n   top: 50%; left: 50%;\r\n   transform: translate(-50%, -50%);\r\n   display: flex;\r\n   flex-direction: column;\r\n   align-items: center;\r\n   background-color: #fff;\r\n   border-radius: 10px;\r\n   box-shadow: 2px 2px 5px 5px rgba(0, 0, 0, 0.02);\r\n   padding: 3rem;\r\n   z-index: 20;\r\n   h2 {\r\n      width: 100%;\r\n      color: #447d53;\r\n      font-size: 32px;\r\n      font-weight: 500;\r\n      border-bottom: 2px solid #447d53;\r\n      padding-bottom: 1.2rem;\r\n   }\r\n\r\n   ${sizeStyles}\r\n\r\n`\r\nconst CloseButton = styled(Close)`\r\n  display: 'block';\r\n  position: absolute;\r\n  top: 1rem; right: 1rem;\r\n  fill: #fff;\r\n  width: 50px;\r\n  cursor: pointer;\r\n  z-index: 30;\r\n`\r\n\r\n\r\nconst Modal = ({ children, title, size, background }) => {\r\n  const { dispatch } = useContext(ChallengeContext);\r\n\r\n  const onClickClose = useCallback(() => {\r\n    dispatch({ type: TOGGLE_MODAL });\r\n  }, []);\r\n\r\n    return (\r\n      <>\r\n        <DarkBackground  background={background} onClick={onClickClose}/>\r\n          <CloseButton onClick={onClickClose} />\r\n          <ModalBlock size={size}>\r\n              <h2>{title}</h2>\r\n              {children}\r\n          </ModalBlock>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, { useCallback } from 'react';\r\nimport styled, { ThemeProvider, keyframes } from 'styled-components';\r\nimport { TOGGLE_MODAL, RESET_CHALLENGE } from '../App';\r\nimport Button from './Button';\r\nimport Modal from './Modal';\r\n\r\n\r\n\r\n\r\nconst ButtonGroup = styled.div`\r\n    width: 100%;\r\n`\r\nconst Info = styled.p`\r\n    font-size: 1.2rem;\r\n    line-height: 1.5;\r\n    text-align: center;\r\n    padding: 1.5rem 2.3rem 0;\r\n`\r\n\r\n\r\nconst ResetMessage = ({ visible, dispatch }) => {\r\n\r\n    const onClickConfirm = useCallback(() => {\r\n        dispatch({ type: RESET_CHALLENGE });\r\n        dispatch({ type: TOGGLE_MODAL, reset: false });\r\n      },[]);\r\n    \r\n    const onClickCancel = useCallback(() => {\r\n        dispatch({ type: TOGGLE_MODAL, reset: false });\r\n        console.log('cancel');\r\n    }, []);\r\n\r\n    if(!visible) return null;\r\n    return (\r\n        <>\r\n            <Modal\r\n                size=\"small\"\r\n                title=\"Reset Challenge\"\r\n                hide=\"none\"\r\n                >\r\n                <Info>\r\n                    ⚠️<br />\r\n                    Are you sure you want to reset this challenge? <br />\r\n                    You will not be able to recover it.</Info>\r\n                <ButtonGroup>\r\n                    <Button size=\"small\" title=\"Reset\" onClick={onClickConfirm}/>\r\n                    <Button size=\"small\" title=\"Cancel\" onClick={onClickCancel}  />\r\n                </ButtonGroup>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResetMessage;","import React, { useState, useEffect, useContext } from 'react';\r\nimport styled, { keyframes, css  } from 'styled-components';\r\nimport { CheckCircle } from '@styled-icons/material/CheckCircle';\r\nimport { ChallengeContext } from '../App';\r\n\r\n\r\nconst showUp = keyframes`\r\n  from { \r\n   opacity: 0;\r\n   transform: translate(-50%, 50px);\r\n}\r\n  to { \r\n   opacity: 1;\r\n   transform: translate(-50%, 0px);\r\n   }\r\n`;\r\n\r\nconst hideDown = keyframes`\r\n  from { \r\n   opacity: 1;\r\n   transform: translate(-50%, 0px);\r\n}\r\n  to { \r\n   opacity: 0;\r\n   transform: translate(-50%, 50px);\r\n   }\r\n`;\r\n\r\nconst MessageBox = styled.div`\r\nposition: absolute;\r\nbottom: -2%;\r\nleft: 50%;\r\ntransform: translateX(-50%);\r\nwidth: 330px;\r\nheight: 70px;\r\nbackground-color: #fff;\r\nborder-radius: 10px;\r\nbox-shadow: 2px 2px 5px 5px rgba(0,0,0,0.02);\r\npadding: 1rem;\r\nz-index: 10;\r\nmargin: 0 auto;\r\nanimation-duration: 0.4s;\r\nanimation-timing-function: ease-out;\r\nanimation-name: ${showUp};\r\nanimation-fill-mode: forwards;\r\n\r\n\r\n${props =>\r\n   props.disappear &&\r\n   css`\r\n      animation-name: ${hideDown};\r\n   `}\r\n`\r\n\r\n\r\nconst IndexColor = styled.div`\r\nwidth: 10px;\r\nheight: 100%;\r\nposition: absolute;\r\ntop: 0; left: 0; botton: 0;\r\nbackground-color: #c5c5c5;\r\nborder-top-left-radius: 10px;\r\nborder-bottom-left-radius: 10px;\r\n\r\n${props =>\r\n   props.cellState === 'checked' &&\r\n   css`\r\n      background-color: #447d53;\r\n   `}\r\n`\r\nconst MessageCont = styled.div`\r\n   display: flex;\r\n   position: absolute;\r\n   top: 50%;\r\n   left: 2.5rem;\r\n   transform: translateY(-50%);\r\n   font-size: 1.2rem;\r\n   font-weight: 500;\r\n\r\n   p{\r\n      margin-top: 0.3rem;\r\n   }\r\n`\r\nconst CheckIcon = styled(CheckCircle)`\r\n  display: block;\r\n   margin-right: 1rem;\r\n  fill: #c5c5c5;\r\n  width: 30px;\r\n\r\n  ${props =>\r\n   props.cellState === 'checked' &&\r\n   css`\r\n      fill: #447d53;\r\n   `}\r\n`\r\n\r\nconst CheckMessage = () => {\r\n   const { cellState, check } = useContext(ChallengeContext);\r\n\r\n   const [animate, setAnimate] = useState(false); \r\n   const [localVisible, setLocalVisible] = useState(check);\r\n\r\n   useEffect(() => {\r\n      if(localVisible && !check){\r\n         setAnimate(true);\r\n         setTimeout(() => setAnimate(false), 400); \r\n      }\r\n      setLocalVisible(check);\r\n   }, [localVisible, check]);\r\n\r\n   if(!animate && !localVisible) return null;\r\n\r\n   return (\r\n      <>\r\n         <MessageBox disappear={!check} >\r\n            <IndexColor cellState={cellState}/>\r\n            <MessageCont>\r\n               <CheckIcon cellState={cellState}/>\r\n               <p>{cellState === 'checked' ? \"Successfully Checked\" : \"Successfully Canceled\"}</p>\r\n            </MessageCont>\r\n         </MessageBox>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default CheckMessage;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport styled, { ThemeProvider, keyframes } from 'styled-components';\r\nimport { TOGGLE_MODAL, ChallengeContext  } from '../App';\r\nimport Button from './Button';\r\nimport Modal from './Modal';\r\n\r\nconst ResultCircle = styled.div`\r\n   width: 230px;\r\n   height: 230px;\r\n   position: relative;\r\n   background-color: #447d53;\r\n   border-radius: 50%;\r\n   color: #fff;\r\n   font-size: 4rem;\r\n   font-weight: 500;\r\n   margin: 2rem 0;\r\n\r\n   div.count {\r\n    position: absolute;\r\n    top: 20%;\r\n    left: 15%;\r\n   }\r\n   div.total {\r\n    position: absolute;\r\n    bottom: 20%;\r\n    right: 15%;\r\n   }\r\n`\r\n\r\nconst ResultCont = styled.div`\r\n    span{\r\n        display: block;\r\n        font-size: 1.3rem;\r\n        margin-bottom: 1.2rem;\r\n    }\r\n\r\n    em {\r\n        display: block;\r\n        text-align: center;\r\n        font-size: 1.5rem;\r\n        font-weight: 500;\r\n        margin-bottom: 1rem;\r\n    }\r\n`\r\n\r\nconst Bar = styled.div`\r\n    width: 2px;\r\n    height: 100px;\r\n    background-color: #fff;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(45deg);\r\n`\r\nconst ButtonGroup = styled.div`\r\n    width: 100%;\r\n`\r\n\r\n\r\nconst Report = ({ count, visible, dispatch }) => {\r\n    const [resultMessage, setResultMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        if(count === 0){\r\n            setResultMessage('도전 실패! 😭');\r\n        } else if(count >= 1 && count < 10){\r\n            setResultMessage('분발하세요! 💪');\r\n        } else if(count >= 10 && count < 20){\r\n            setResultMessage('좀 더 열심히! 👌');\r\n        } else if(count >= 20 && count < 30){\r\n            setResultMessage('잘 했어요! 👍');\r\n        } else if(count === 30){\r\n            setResultMessage('🎉도전 성공!!! 👏');\r\n        }\r\n    }, [count]);\r\n\r\n    const onClickConfirm = useCallback(() => {\r\n        dispatch({ type: TOGGLE_MODAL, report: false });\r\n      },[]);\r\n    \r\n\r\n    if(!visible) return null;\r\n    return (\r\n        <>\r\n            <Modal\r\n                title=\"CHALLENGE REPORT\" \r\n                size=\"small\">\r\n                <ResultCircle>\r\n                    <div className=\"count\">{count < 10 ? `0${count}` : count}</div>\r\n                    <Bar />\r\n                    <div className=\"total\">30</div>\r\n                </ResultCircle>\r\n                <ResultCont>\r\n                    <span>SUCCESS RATE : {Math.round(count / 30 * 100)}%</span>\r\n                    <em>{resultMessage}</em>\r\n                </ResultCont>\r\n                <ButtonGroup>\r\n                    <Button title=\"OK\" onClick={onClickConfirm}/>\r\n                </ButtonGroup>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report;","import React, { useContext, memo, useCallback } from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport { ChallengeContext, TOGGLE_MODAL } from '../App';\r\nimport { Edit } from '@styled-icons/material/Edit';\r\n\r\n\r\n\r\nconst Content = styled.div`\r\n    width: 100%;\r\n    margin-bottom: 1.5rem;\r\n    h2{\r\n        color : #666;\r\n        font-size: 1.2rem;\r\n        margin-bottom: 0.8rem;\r\n    }\r\n    div.challenge-cont{\r\n        width: 100%;\r\n        font-size: 1.5rem;\r\n        font-weight: 500;\r\n        line-height: 1.5;\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.mainColor};\r\n        padding: 0 0.2rem;\r\n    }\r\n    span.d-day{\r\n        display: block;\r\n        text-align: center; \r\n        margin-top: 0.5rem;\r\n        font-size: 1rem;\r\n    }\r\n    div.memo {\r\n        font-size: 1.2rem;\r\n    }\r\n`\r\nconst EditButton = styled(Edit)`\r\n  display: block;\r\n  position: absolute;\r\n  top: 0; right: 0;\r\n  cursor: pointer;\r\n  fill: ${({ theme }) => theme.colors.subColor};\r\n  width: 30px;\r\n  }  \r\n  &:hover {\r\n    fill:  ${({ theme }) => theme.colors.mainColor};\r\n  }\r\n`\r\n\r\n\r\nconst Note = memo(() => {\r\n    const { challenge, dispatch } = useContext(ChallengeContext);\r\n    const { goal, startDate, endDate, dday, motivate } = challenge;\r\n\r\n\r\n    const onEditForm = useCallback(() => {\r\n        dispatch({ type: TOGGLE_MODAL, form: true });\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <EditButton onClick={onEditForm}/>\r\n            <Content>\r\n                <h2>My Goal</h2>\r\n                <div className=\"challenge-cont\">{goal}</div>\r\n            </Content>\r\n            <Content>\r\n                <h2>Challenge period</h2>\r\n                <div className=\"challenge-cont\">{startDate} - {endDate}</div>\r\n                <span className=\"d-day\">도전 종료일까지 {dday}일 남았습니다</span>\r\n            </Content>\r\n            <Content>\r\n                <h2>Motivate</h2>\r\n        <div className=\"challenge-cont memo\">{motivate}</div>\r\n            </Content>\r\n        </>\r\n    )\r\n});\r\n\r\nexport default Note;","import React, { useState, useRef, memo, useContext } from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport { TOGGLE_MODAL, ChallengeContext } from '../App';\r\nimport { InsertChartOutlined } from '@styled-icons/material/InsertChartOutlined';\r\n\r\n\r\nconst CurrentWrap = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n`\r\n\r\nconst CurrentBox = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 195px;\r\n    background-color: #f4f7f3;\r\n    border: 1px solid #cfd7cd;\r\n    padding: 1rem 2.5rem;\r\n    margin-top: 1rem;\r\n`\r\n\r\nconst DayCounter = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    font-size: 5rem;\r\n    font-weight: 600;\r\n    color: #447d53;\r\n    em.current-count{\r\n       display: block;\r\n    }\r\n    strong.total-count{\r\n        display: block;\r\n        text-align: right;\r\n    }\r\n`\r\nconst Bar = styled.div`\r\n    width: 5px;\r\n    height: 100px;\r\n    background-color: ${({ theme }) => theme.colors.mainColor};\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(45deg);\r\n`\r\n\r\nconst Report = styled(InsertChartOutlined)`\r\n  display: block;\r\n  position: absolute;\r\n  top: -5px; right: 0;\r\n  cursor: pointer;\r\n  fill: ${({ theme }) => theme.colors.subColor};\r\n  width: 30px;\r\n  }  \r\n  &:hover {\r\n    fill:  ${({ theme }) => theme.colors.mainColor};\r\n  }\r\n`\r\n\r\nconst CounterBox = memo(() => {\r\n    const { dispatch, count } = useContext(ChallengeContext);\r\n\r\n    const onClickReport = () => {\r\n        dispatch({ type: TOGGLE_MODAL, report: true });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CurrentWrap>\r\n                <h2>Current Count</h2>\r\n                <Report onClick={onClickReport}/>\r\n                <CurrentBox>\r\n                    <DayCounter>\r\n                        <em className=\"current-count\">{count < 10 ? `0${count}` : count}</em>\r\n                        <Bar />\r\n                        <strong className=\"total-count\">30</strong>\r\n                    </DayCounter>\r\n                </CurrentBox>\r\n            </CurrentWrap>\r\n        </>\r\n    )\r\n});\r\n\r\nexport default CounterBox;","import React, { memo, useState, useCallback, useContext, useEffect } from 'react';\r\nimport styled, { css, ThemeProvider } from 'styled-components';\r\nimport { ChallengeContext, CHECKED_CELL, CANCELED_CELL } from '../App';\r\n\r\nconst colorStyles = css`\r\n  ${props =>\r\n    props.done &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.colors.mainColor};\r\n      color: #fff;\r\n    `}\r\n`;\r\n\r\nconst Circle = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 105px;\r\n    height: 105px;\r\n    border: 1px solid #447d53;\r\n    border-radius: 50%;\r\n    margin: 0 0.7rem 0.6rem 0;\r\n    cursor: pointer;\r\n    color: #c5c5c5;\r\n\r\n    ${colorStyles}\r\n`\r\nconst Days = styled.div`\r\n    position: absolute;\r\n    top: 50%; left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 4rem;\r\n    font-weight: 300;\r\n`\r\n\r\n\r\n\r\n\r\nconst Cell = memo(({ days }) => {\r\n    const { dispatch, check } = useContext(ChallengeContext);\r\n    const [done, setDone] = useState(false);\r\n    const [animate, setAnimate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(check){\r\n            setTimeout(() => {\r\n                setAnimate(false);\r\n            }, 600)\r\n        }\r\n    }, [check, animate]);\r\n\r\n    const onClickCell = useCallback(() => {\r\n        setAnimate(true);\r\n        if(animate && check){\r\n            return;\r\n        } \r\n        if(done) {\r\n            setDone(false);\r\n            setAnimate(true);\r\n            dispatch({ type: CANCELED_CELL });\r\n        } else {\r\n            setDone(true);\r\n            setAnimate(true);\r\n            dispatch({ type: CHECKED_CELL });\r\n        }\r\n      }, [done, animate]);\r\n\r\n    return (\r\n        <>\r\n            <Circle onClick={onClickCell} done={done}>\r\n                <Days>{days}</Days>\r\n            </Circle>\r\n        </>\r\n    )\r\n});\r\n\r\nexport default Cell;","import React, { useState, useRef } from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport Cell from './Cell';\r\n\r\n\r\nconst dayNumbers = Array(30).fill().map((v, i) => i + 1);\r\n\r\nconst CellTable = ({ dday }) => {\r\n\r\n    return (\r\n        <>\r\n            {dayNumbers.map((v, i) => <Cell key={`${i + 1}days`} days={v} dday={dday} />)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CellTable;","import React from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport theme from '../Style/Theme';\r\nimport Note from './Note';\r\nimport CounterBox from './CounterBox';\r\nimport CellTable from './CellTable';\r\n\r\nconst LeftBox = styled.div`\r\n    position: relative;\r\n    width: 28%;\r\n    margin-right: 3%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst RightBox = styled.div`\r\n    width: 65%;\r\n`\r\n\r\n\r\nconst ChallengeBoard = ({ visible, count }) => {\r\n\r\n\r\n   if(!visible) return null;\r\n   return (\r\n      <>\r\n         <LeftBox>\r\n            <Note />\r\n            <CounterBox count={count}/>\r\n         </LeftBox>\r\n         <RightBox>\r\n            <CellTable />\r\n         </RightBox>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ChallengeBoard;\r\n","import React, { useState, useRef, useCallback, useEffect, useContext } from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport Button from './Button';\r\nimport { START_CHALLENGE, ChallengeContext, TOGGLE_MODAL } from '../App';\r\n\r\nconst FormGroup = styled.form`\r\n   width: 100%;\r\n`\r\n\r\nconst FormBlock = styled.div`\r\n   label {\r\n      color : #666;\r\n      font-size: 1.6rem;\r\n      margin: 2.5rem 0 1rem 0.3rem;\r\n   }\r\n   label .message{\r\n      display: inline-block;\r\n      font-size: 1rem;\r\n      color: tomato;\r\n      margin-left: 1rem;\r\n   }\r\n   input, textarea {\r\n      width: 100%;\r\n      padding: 1rem;\r\n      border: 1px solid #d4e2d4;\r\n      border-radius: 5px;\r\n      outline: none;\r\n   }\r\n\r\n   input {\r\n      height: 60px;\r\n      font-size: 1.5rem;\r\n      font-weight: 500;\r\n   }\r\n   textarea {\r\n      height: 160px;\r\n      font-size: 1.2rem;\r\n      line-height: 1.5;\r\n      resize: none;\r\n   }\r\n   input:focus,\r\n   textarea:focus {\r\n      border: 1px solid #447d53;\r\n   }\r\n   p {\r\n      color : #666;\r\n      margin-top: 0.7rem;\r\n      text-align: right;\r\n   }\r\n   span {\r\n      font-weight: 500;\r\n      color:  #447d53;\r\n   }\r\n`\r\nconst getToday = () => {\r\n   let today = new Date();\r\n   return convertDateString(today);\r\n}\r\n\r\nconst convertDateString = (date) => {\r\n   let year = date.getFullYear();\r\n   let month = date.getMonth() + 1;\r\n   month = month >= 10 ? month : `0${month}`\r\n   let day = date.getDate();\r\n   day = day >= 10 ? day : `0${day}`\r\n   return `${year}-${month}-${day}`\r\n}\r\n\r\nconst getAfter30days = (date) => {\r\n   let inputDate = new Date(date);\r\n   inputDate.setDate( inputDate.getDate() + 29 );\r\n   return convertDateString(inputDate);\r\n}\r\n\r\nconst getDday = (date) => {\r\n   const startDay = new Date(date);\r\n   const after30Days = getAfter30days(getToday());\r\n   const endDay = new Date(after30Days);\r\n\r\n   const gap = startDay.getTime() - endDay.getTime();\r\n   const dDay = Math.floor(gap / (1000 * 60 * 60 * 24)) * -1;\r\n\r\n   return dDay + 1;\r\n}\r\n\r\n\r\n\r\nconst Form = ( ) => {\r\n   const { challenge, dispatch, initial } = useContext(ChallengeContext);\r\n\r\n   const [goal, setGoal] = useState('');\r\n   const [message, setMessage] = useState('');\r\n   const [startDate, setStartDate] = useState(getToday());\r\n   const [endDate, setEndDate] = useState(getAfter30days(getToday()));\r\n   const [motivate, setMotivate] = useState('');\r\n   const inputRef = useRef(null);\r\n   const dday = getDday(startDate);\r\n   \r\n   const onChangeGoal = useCallback((e) => {\r\n      setGoal(e.target.value);\r\n   },[]);\r\n\r\n   const onChangeDate = useCallback((e) => {\r\n      setStartDate(e.target.value);\r\n      setEndDate(getAfter30days(e.target.value));\r\n   },[]);\r\n\r\n   const onChangeMotivate = useCallback((e) => {\r\n      setMotivate(e.target.value);\r\n   },[]);\r\n\r\n   const onSubmitForm = (e) => {\r\n      e.preventDefault(); \r\n      if(!goal){\r\n         setMessage('목표를 입력해주세요');\r\n         inputRef.current.focus();\r\n      } else {\r\n         dispatch({ \r\n            type: START_CHALLENGE, \r\n            challenge: {\r\n               goal: goal,\r\n               startDate: startDate,\r\n               endDate: endDate,\r\n               dday: dday,\r\n               motivate: motivate\r\n            }\r\n         });\r\n         dispatch({ type: TOGGLE_MODAL, form: false });\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      if(initial){\r\n         setGoal(challenge.goal);\r\n         setMotivate(challenge.motivate);\r\n         setStartDate(challenge.startDate);\r\n      }\r\n   }, [initial, challenge.goal, challenge.motivate, challenge.startDate])\r\n\r\n   return (\r\n      <>\r\n         <FormGroup onSubmit={onSubmitForm}>\r\n            <FormBlock>\r\n               <label>MY GOAL<span className=\"message\">{message}</span></label>\r\n               <input\r\n                  value={goal}\r\n                  onChange={onChangeGoal}\r\n                  name=\"goal\" \r\n                  placeholder=\"Study React\"\r\n                  autoComplete=\"off\"\r\n                  ref={inputRef}\r\n               />\r\n            </FormBlock>\r\n            <FormBlock>\r\n               <label>START DAY<span className=\"message\">{initial && \"날짜를 변경 할 수 없습니다\"}</span></label>\r\n               <input \r\n                  type=\"date\" \r\n                  name=\"date\"\r\n                  value={startDate}\r\n                  onChange={onChangeDate}\r\n                  min={getToday()}\r\n                  disabled={initial}\r\n               />\r\n               <p>도전 종료일은 <span>{endDate}</span> 입니다</p>\r\n            </FormBlock>\r\n            <FormBlock>\r\n               <label>MOTIVATE YOURSELF</label>\r\n               <textarea \r\n                  name=\"motivate\" \r\n                  placeholder=\"The truth is that everyone is bored, and devotes himself to cultivating habits.\"\r\n                  value={motivate}\r\n                  maxLength=\"47\"\r\n                  onChange={onChangeMotivate}\r\n               ></textarea>\r\n            </FormBlock>\r\n            <Button title=\"START\" type=\"subimt\"/>\r\n         </FormGroup>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Form;","import React, { useState, useRef, memo } from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport Modal from './Modal';\r\nimport Form from './Form';\r\n\r\nconst StartChallenge = memo(({ visible }) => {\r\n\r\n    if(!visible) return null;\r\n    return (\r\n        <Modal \r\n            title=\"YOUR CHALLENGE\"\r\n            >\r\n            <Form/>\r\n        </Modal>\r\n    )\r\n});\r\n\r\nexport default StartChallenge;","import React, { useReducer, useEffect, useCallback, createContext, useMemo } from 'react';\nimport GlobalStyle from './Style/globalStyles';\nimport Template from './Components/Template';\nimport AddMessage from './Components/AddMessage';\nimport Reset from './Components/Reset';\nimport ResetMessage from './Components/ResetMessage';\nimport CheckMessage from './Components/CheckMessage';\nimport Report from './Components/Report';\nimport ChallengeBoard from './Components/ChallengeBoard';\nimport StartChallenge from './Components/StartChallenge';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { FlashAuto } from '@styled-icons/material';\nimport { CheckCircleOutlineDimensions } from '@styled-icons/material/CheckCircleOutline';\n\n\nexport const ChallengeContext = createContext({ // 초기값\n  initial : false,\n  check: false,\n  modal: {\n    form: false,\n    report: false,\n    reset: false,\n  },\n  count: 0,\n  cellState: 'unchecked',\n  challenge: {\n    goal: '',\n    startDate: '',\n    endDate: '',\n    dday: '',\n    motivate: ''\n  },\n  dispatch: () => {},\n});\n\nconst initialState = {\n  initial : false,\n  check: false,\n  modal: {\n    form: false,\n    report: false,\n    reset: false,\n  },\n  count: 0,\n  cellState: 'unchecked',\n  challenge: {\n    goal: '',\n    startDate: '',\n    endDate: '',\n    dday: '',\n    motivate: ''\n  },\n}\n\nexport const TOGGLE_MODAL = 'TOGGLE_MODAL';\nexport const START_CHALLENGE = 'START_CHALLENGE';\nexport const EDIT_CHALLENGE = 'EDIT_CHALLENGE';\nexport const CHECKED_CELL = 'CHECKED_CELL';\nexport const CANCELED_CELL = 'CANCELED_CELL';\nexport const HIDE_CHECKMESSAGE = 'HIDE_CHECKMESSAGE';\nexport const RESET_CHALLENGE = 'RESET_CHALLENGE';\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case TOGGLE_MODAL: \n      return {\n        ...state,\n        modal: {\n          form: action.form,\n          report: action.report,\n          reset: action.reset,\n        }\n    }\n    case START_CHALLENGE: \n      return {\n        ...state,\n        challenge : action.challenge,\n        initial: true,\n      }\n    case EDIT_CHALLENGE: \n    return {\n      ...state,\n      challenge : action.challenge,\n    }\n    case CHECKED_CELL: \n      return {\n        ...state,\n        count: state.count + 1,\n        check: true,\n        cellState: 'checked',\n      }\n    case CANCELED_CELL: \n      return {\n        ...state,\n        count: state.count - 1,\n        check: true,\n        cellState: 'unchecked',\n      }\n    case HIDE_CHECKMESSAGE: \n      return {\n        ...state,\n        check: false,\n      }\n    case RESET_CHALLENGE: \n      return initialState;\n    default :\n      return state;\n  }\n}\n\n\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { modal, initial, count, challenge, cellState, check } = state;\n\n  const onClickReset = useCallback(() => {\n    dispatch({ type: TOGGLE_MODAL, reset: true });\n  }, []);\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      dispatch({ type: HIDE_CHECKMESSAGE });\n    }, 600)\n  }, [check]);\n\n  const value = useMemo(() => (\n    { challenge: challenge, modal: modal, dispatch, initial, count, cellState, check }\n  ), [challenge, initial, count, cellState, check]);\n\n\n  return (\n  <>\n    <GlobalStyle />\n      <ChallengeContext.Provider value={value}>\n        <Template>\n          <AddMessage />\n          <ChallengeBoard \n            visible={initial}\n            count={count}\n            cellState={cellState}\n            />\n          <CheckMessage/>\n        </Template>\n        <StartChallenge \n          visible={modal.form}/>\n        <Report \n          visible={modal.report} \n            count={count} \n            dispatch={dispatch}/>\n        <ResetMessage \n          visible={modal.reset} \n          dispatch={dispatch}\n          />\n        <Reset onClickReset={onClickReset}/>\n      </ChallengeContext.Provider>\n  </>\n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}